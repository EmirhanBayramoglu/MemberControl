// <auto-generated />
using System;
using MembersControlSystem.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MembersControlSystem.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231221091039_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MembersControlSystem.Models.Addresses", b =>
                {
                    b.Property<int>("addressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("addressId"), 1L, 1);

                    b.Property<string>("cityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("geoId")
                        .HasColumnType("int");

                    b.Property<string>("streetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("suiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("addressId");

                    b.HasIndex("geoId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            addressId = 1,
                            cityName = "Gwenborough",
                            geoId = 1,
                            streetName = "Kulas Light",
                            suiteName = "Apt. 556",
                            zipcode = "92998-3874"
                        },
                        new
                        {
                            addressId = 2,
                            cityName = "Wisokyburgh",
                            geoId = 2,
                            streetName = "Victor Plains",
                            suiteName = "suiteName 879",
                            zipcode = "90566-7771"
                        },
                        new
                        {
                            addressId = 3,
                            cityName = "McKenziehaven",
                            geoId = 3,
                            streetName = "Douglas Extension",
                            suiteName = "suiteName 847",
                            zipcode = "59590-4157"
                        },
                        new
                        {
                            addressId = 4,
                            cityName = "South Elvis",
                            geoId = 4,
                            streetName = "Hoeger Mall",
                            suiteName = "Apt. 692",
                            zipcode = "53919-4257"
                        },
                        new
                        {
                            addressId = 5,
                            cityName = "Roscoeview",
                            geoId = 5,
                            streetName = "Skiles Walks",
                            suiteName = "suiteName 351",
                            zipcode = "33263"
                        },
                        new
                        {
                            addressId = 6,
                            cityName = "South Christy",
                            geoId = 6,
                            streetName = "Norberto Crossing",
                            suiteName = "Apt. 950",
                            zipcode = "23505-1337"
                        },
                        new
                        {
                            addressId = 7,
                            cityName = "Howemouth",
                            geoId = 7,
                            streetName = "Rex Trail",
                            suiteName = "suiteName 280",
                            zipcode = "58804-1099"
                        },
                        new
                        {
                            addressId = 8,
                            cityName = "Aliyaview",
                            geoId = 8,
                            streetName = "Ellsworth Summit",
                            suiteName = "suiteName 729",
                            zipcode = "45169"
                        },
                        new
                        {
                            addressId = 9,
                            cityName = "Bartholomebury",
                            geoId = 9,
                            streetName = "Dayna Park",
                            suiteName = "suiteName 449",
                            zipcode = "76495-3109"
                        },
                        new
                        {
                            addressId = 10,
                            cityName = "Lebsackbury",
                            geoId = 10,
                            streetName = "Kattie Turnpike",
                            suiteName = "suiteName 198",
                            zipcode = "31428-2261"
                        });
                });

            modelBuilder.Entity("MembersControlSystem.Models.Companies", b =>
                {
                    b.Property<int>("companyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyId"), 1L, 1);

                    b.Property<string>("bs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("catchPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("companyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            companyId = 1,
                            bs = "harness real-time e-markets",
                            catchPhrase = "Multi-layered client-server neural-net",
                            companyName = "Romaguera-Crona"
                        },
                        new
                        {
                            companyId = 2,
                            bs = "synergize scalable supply-chains",
                            catchPhrase = "Proactive didactic contingency",
                            companyName = "Deckow-Crist"
                        },
                        new
                        {
                            companyId = 3,
                            bs = "e-enable strategic applications",
                            catchPhrase = "Face to face bifurcated interface",
                            companyName = "Romaguera-Jacobson"
                        },
                        new
                        {
                            companyId = 4,
                            bs = "transition cutting-edge web services",
                            catchPhrase = "Multi-tiered zero tolerance productivity",
                            companyName = "Robel-Corkery"
                        },
                        new
                        {
                            companyId = 5,
                            bs = "revolutionize end-to-end systems",
                            catchPhrase = "User-centric fault-tolerant solution",
                            companyName = "Keebler LLC"
                        },
                        new
                        {
                            companyId = 6,
                            bs = "e-enable innovative applications",
                            catchPhrase = "Synchronised bottom-line interface",
                            companyName = "Considine-Lockman"
                        },
                        new
                        {
                            companyId = 7,
                            bs = "generate enterprise e-tailers",
                            catchPhrase = "Configurable multimedia task-force",
                            companyName = "Johns Group"
                        },
                        new
                        {
                            companyId = 8,
                            bs = "e-enable extensible e-tailers",
                            catchPhrase = "Implemented secondary concept",
                            companyName = "Abernathy Group"
                        },
                        new
                        {
                            companyId = 9,
                            bs = "aggregate real-time technologies",
                            catchPhrase = "Switchable contextually-based project",
                            companyName = "Yost and Sons"
                        },
                        new
                        {
                            companyId = 10,
                            bs = "target end-to-end models",
                            catchPhrase = "Centralized empowering task-force",
                            companyName = "Hoeger LLC"
                        });
                });

            modelBuilder.Entity("MembersControlSystem.Models.Geos", b =>
                {
                    b.Property<int>("geoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("geoId"), 1L, 1);

                    b.Property<float>("lat")
                        .HasColumnType("real");

                    b.Property<float>("lng")
                        .HasColumnType("real");

                    b.HasKey("geoId");

                    b.ToTable("Geos");

                    b.HasData(
                        new
                        {
                            geoId = 1,
                            lat = -37.3159f,
                            lng = 81.1496f
                        },
                        new
                        {
                            geoId = 2,
                            lat = -43.9509f,
                            lng = -34.4618f
                        },
                        new
                        {
                            geoId = 3,
                            lat = -68.6102f,
                            lng = -47.0653f
                        },
                        new
                        {
                            geoId = 4,
                            lat = 29.4572f,
                            lng = -164.299f
                        },
                        new
                        {
                            geoId = 5,
                            lat = -31.8129f,
                            lng = 62.5342f
                        },
                        new
                        {
                            geoId = 6,
                            lat = -71.4197f,
                            lng = 71.7478f
                        },
                        new
                        {
                            geoId = 7,
                            lat = 24.8918f,
                            lng = 21.8984f
                        },
                        new
                        {
                            geoId = 8,
                            lat = -14.399f,
                            lng = -120.7677f
                        },
                        new
                        {
                            geoId = 9,
                            lat = 24.6463f,
                            lng = -168.8889f
                        },
                        new
                        {
                            geoId = 10,
                            lat = -38.2386f,
                            lng = 57.2232f
                        });
                });

            modelBuilder.Entity("MembersControlSystem.Models.Members", b =>
                {
                    b.Property<int>("memberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("memberId"), 1L, 1);

                    b.Property<int>("addressId")
                        .HasColumnType("int");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<string>("memberEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("memberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("memberPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("webSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("memberId");

                    b.HasIndex("addressId")
                        .IsUnique();

                    b.HasIndex("companyId")
                        .IsUnique();

                    b.HasIndex("userName")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            memberId = 1,
                            addressId = 1,
                            companyId = 1,
                            memberEmail = "Sincere@april.biz",
                            memberName = "Leanne Graham",
                            memberPhoneNumber = "1-770-736-8031 x56442",
                            password = "mahmut123",
                            userName = "Bret",
                            webSite = "hildegard.org"
                        },
                        new
                        {
                            memberId = 2,
                            addressId = 2,
                            companyId = 2,
                            memberEmail = "Shanna@melissa.tv",
                            memberName = "Ervin Howell",
                            memberPhoneNumber = "010-692-6593 x09125",
                            password = "mahmut123",
                            userName = "Antonette",
                            webSite = "anastasia.net"
                        },
                        new
                        {
                            memberId = 3,
                            addressId = 3,
                            companyId = 3,
                            memberEmail = "Nathan@yesenia.net",
                            memberName = "Clementine Bauch",
                            memberPhoneNumber = "1-463-123-4447",
                            password = "mahmut123",
                            userName = "Samantha",
                            webSite = "ramiro.info"
                        },
                        new
                        {
                            memberId = 4,
                            addressId = 4,
                            companyId = 4,
                            memberEmail = "Julianne.OConner@kory.org",
                            memberName = "Patricia Lebsack",
                            memberPhoneNumber = "493-170-9623 x156",
                            password = "mahmut123",
                            userName = "Karianne",
                            webSite = "kale.biz"
                        },
                        new
                        {
                            memberId = 5,
                            addressId = 5,
                            companyId = 5,
                            memberEmail = "Lucio_Hettinger@annie.ca",
                            memberName = "Chelsey Dietrich",
                            memberPhoneNumber = "(254)954-1289",
                            password = "mahmut123",
                            userName = "Kamren",
                            webSite = "demarco.info"
                        },
                        new
                        {
                            memberId = 6,
                            addressId = 6,
                            companyId = 6,
                            memberEmail = "Karley_Dach@jasper.info",
                            memberName = "Mrs. Dennis Schulist",
                            memberPhoneNumber = "1-477-935-8478 x6430",
                            password = "mahmut123",
                            userName = "Leopoldo_Corkery",
                            webSite = "ola.org"
                        },
                        new
                        {
                            memberId = 7,
                            addressId = 7,
                            companyId = 7,
                            memberEmail = "Telly.Hoeger@billy.biz",
                            memberName = "Kurtis Weissnat",
                            memberPhoneNumber = "210.067.6132",
                            password = "mahmut123",
                            userName = "Elwyn.Skiles",
                            webSite = "elvis.io"
                        },
                        new
                        {
                            memberId = 8,
                            addressId = 8,
                            companyId = 8,
                            memberEmail = "Sherwood@rosamond.me",
                            memberName = "Nicholas Runolfsdottir V",
                            memberPhoneNumber = "586.493.6943 x140",
                            password = "mahmut123",
                            userName = "Maxime_Nienow",
                            webSite = "jacynthe.com"
                        },
                        new
                        {
                            memberId = 9,
                            addressId = 9,
                            companyId = 9,
                            memberEmail = "Chaim_McDermott@dana.io",
                            memberName = "Glenna Reichert",
                            memberPhoneNumber = "(775)976-6794 x41206",
                            password = "mahmut123",
                            userName = "Delphine",
                            webSite = "conrad.com"
                        },
                        new
                        {
                            memberId = 10,
                            addressId = 10,
                            companyId = 10,
                            memberEmail = "Rey.Padberg@karina.biz",
                            memberName = "Clementina DuBuque",
                            memberPhoneNumber = "024-648-3804",
                            password = "mahmut123",
                            userName = "Moriah.Stanton",
                            webSite = "ambrose.net"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25cb7949-2182-4e7e-8d6d-8da7434b1350",
                            ConcurrencyStamp = "5c6820a5-af44-4b11-95f5-cf35a685a3f8",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "58a50b2e-7b19-4ea0-a938-3acf0c153349",
                            ConcurrencyStamp = "5f4085e5-8e40-4db3-a5df-0c1df8c1d7eb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MembersControlSystem.Models.Addresses", b =>
                {
                    b.HasOne("MembersControlSystem.Models.Geos", "geo")
                        .WithOne("address")
                        .HasForeignKey("MembersControlSystem.Models.Addresses", "geoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("geo");
                });

            modelBuilder.Entity("MembersControlSystem.Models.Members", b =>
                {
                    b.HasOne("MembersControlSystem.Models.Addresses", "address")
                        .WithOne("member")
                        .HasForeignKey("MembersControlSystem.Models.Members", "addressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MembersControlSystem.Models.Companies", "company")
                        .WithOne("member")
                        .HasForeignKey("MembersControlSystem.Models.Members", "companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MembersControlSystem.Models.Addresses", b =>
                {
                    b.Navigation("member")
                        .IsRequired();
                });

            modelBuilder.Entity("MembersControlSystem.Models.Companies", b =>
                {
                    b.Navigation("member")
                        .IsRequired();
                });

            modelBuilder.Entity("MembersControlSystem.Models.Geos", b =>
                {
                    b.Navigation("address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
